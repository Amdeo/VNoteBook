vnote_backup_file_826537664 G:/jianguo/我的坚果云/code/笔记/VNoteBook/代码片段/C++/面向对象.md
# 面向对象
## 类
定义一个类
`可以看做定义一个类型`
`类也是一种作用域，每个类都会定义它自己的作用域。在类的作用域之外，`
`普通的成员只能通过对象来访问，静态成员即可以通过对象访问，也可以通过类访问`
`在类中通typedef定义的类型只能通过类来访问`
```
// 定义一个类，里面什么都没有
class myclass
{

};

// 类可以包含变量和函数
class myclass
{
    int a;
    void func();
};

//
class myclass
{
public: //所有人都可以用
protect: //只有派生类和类本身可以调用
private: //只有类本身可以调用
}
```

## 创建对象
```C++
class myclass;

class myclass a;
class myclass b;
myclass c;

myclass * d = new myclass();

myclass d[100];
```
对象数组
```C++
#include <iostream>

using namespace std;

class classArray
{
public:
    /* data */
    int a;
    int b;

public:
    classArray(int a, int b);
    ~classArray();
};

classArray::classArray(int a, int b) : a(a), b(b)
{
}

classArray::~classArray()
{
}

int main(int argc, char const *argv[])
{
    classArray c[5] = {
        classArray(1, 2),
        classArray(3, 4),
        classArray(5, 6),
        classArray(7, 8),
        classArray(9, 10),
    };

    cout << c[1].a << endl;
    cout << c[1].b << endl;

    return 0;
}

```

静态成员

`静态成员变量必须初始化，而且只能在类外`
```C++
class Student{
public:
    Student(char *name, int age, float score);
    void show();
public:
    static int m_total;  //静态成员变量
private:
    char *m_name;
    int m_age;
    float m_score;
};
```

```
type class::name = value;

//
int Student::m_total = 1;

Student *pstu = new Student("李华", 16, 96);
pstu -> m_total = 20;
```
## 静态成员函数

`普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。`
`因为静态成员函数可以通过类来调用，编译器不会为它增加形参this，它不需要当前的对象的地址，所以不管有没有创建对象，都可以调用静态成员函数。`


## const成员变量和成员函数
### const成员变量
```C++
class VLA{
private:
    const int m_len;
    int *m_arr;
public:
    VLA(int len);
};
//必须使用初始化列表来初始化 m_len
VLA::VLA(int len): m_len(len){
    m_arr = new int[len];
}
```
### 成员函数
`被const修饰的函数，只能读取成员变量的值，不能修改成员变量的值，一般将get函数设置为常成员函数`
```
class Student{
public:
    Student(char *name, int age, float score);
    void show();
    //声明常成员函数
    char *getname() const;
    int getage() const;
    float getscore() const;
private:
    char *m_name;
    int m_age;
    float m_score;
};
```

## const对象
`被const修饰的对象们，只能调用类的const成员（包括const成员变量和const成员函数）`

